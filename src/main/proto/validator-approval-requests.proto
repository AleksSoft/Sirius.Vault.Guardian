syntax = "proto3";

option csharp_namespace = "Swisschain.Sirius.GuardianValidatorApi";
option java_package = "io.swisschain.sirius.guardianApi.generated.validatorApprovalRequests";

package swisschain.sirius.GuardianValidatorApi;

service Validators {
  rpc CreateApprovalRequest(CreateApprovalRequestRequest) returns (CreateApprovalRequestResponse);
  rpc GetApprovalResults(GetApprovalResultsRequest) returns (GetApprovalResponse);
  rpc AcknowledgeResult(AcknowledgeResultRequest) returns (AcknowledgeResultResponse);
  rpc GetActiveValidators(ActiveValidatorsRequest) returns (ActiveValidatorsResponse);
}

message CreateApprovalRequestRequest {
  string requestId = 1;
  string transferSigningRequestId = 2;
  repeated ValidatorRequest validatorRequests = 3;
  message ValidatorRequest {
    string validaditorId = 1;
    string transactionDetailsEncBase64 = 2;
    string secretEncBase64 = 3;
    string ivNonce = 4;
  }
}

message CreateApprovalRequestResponse {
  ValidatorsApiError error = 1;
}

message GetApprovalResultsRequest {
}

message GetApprovalResponse {
  ValidatorsApiError error = 1;
  repeated ApprovalResponse payload = 2;
  message ApprovalResponse {
    string validatorId = 1;
    string transferSigningRequestId = 2;
    string resolutionDocumentEncBase64 = 3;
    string signature = 4;
  }
  enum ResolutionStatus {
    approve = 0;
    reject = 1;
    skip = 2;
  }
}

message AcknowledgeResultRequest{
  string transferSigningRequestId = 1;
  string validatorId = 2;
}

message AcknowledgeResultResponse {
  ValidatorsApiError error = 1;
}

message ActiveValidatorsRequest {
}

message ActiveValidatorsResponse {
  ValidatorsApiError error = 1;
  repeated ActiveValidator ActiveValidatorsRequest = 2;
  message ActiveValidator {
    string validatorId = 1;
    string validatorPublicKeyPem = 2;
  }
}

message ValidatorsApiError {
  enum ErrorCodes {
    Unknown = 0;
    InternalServerError = 1;
  }
  ErrorCodes code = 1;
  string message = 2;
}